from PIL import Image
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model, Model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.layers import Input
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from datetime import datetime
from reportlab.lib.units import inch
import os

# Load model and wrap with Functional API
mri_model = load_model("model/mri_filter_model.h5")
def is_brain_mri(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    prediction = mri_model.predict(img_array)[0][0]
    return prediction < 0.5

original_model = load_model("model/brain_tumor_cnn.h5")
wrapped_input = Input(shape=(150, 150, 1), name="model_input")
wrapped_output = original_model(wrapped_input)
model = Model(inputs=wrapped_input, outputs=wrapped_output)

classes = ["Glioma", "Meningioma", "No Tumor", "Pituitary"]

def is_mri_image(img_array):
    # Simple heuristic: MRI images are grayscale and have less variance
    # Reject if image has multiple channels (likely a colorful non-MRI image)
    if img_array.shape[-1] != 1:
        return False
    # Optionally: check pixel intensity spread (e.g., not flat or fully colorful)
    variance = np.var(img_array)
    if variance < 0.001:
        return False
    return True

def predict_tumor(img_path):
    img = image.load_img(img_path, target_size=(150, 150), color_mode="grayscale")
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    if not is_mri_image(img_array):
        return "Invalid", 0.0

    predictions = model.predict(img_array)[0]
    predicted_index = np.argmax(predictions)
    predicted_label = classes[predicted_index]
    confidence = float(predictions[predicted_index])
    return predicted_label, confidence

def generate_pdf_report(result, confidence, img_path):
    filename = os.path.basename(img_path)
    pdf_filename = f"static/reports/Report_{filename.replace('.jpg', '').replace('.png', '')}.pdf"
    os.makedirs("static/reports", exist_ok=True)

    c = canvas.Canvas(pdf_filename, pagesize=letter)
    width, height = letter

    # Pink color
    pink = colors.Color(red=1, green=0.41, blue=0.7)

    # Draw pink border around page (10 points margin)
    border_margin = 10
    c.setStrokeColor(pink)
    c.setLineWidth(4)
    c.rect(border_margin, border_margin, width - 2*border_margin, height - 2*border_margin)

    # Title: Brainlyst - black bold
    c.setFont("Helvetica-Bold", 28)
    c.setFillColor(colors.black)
    title_y = height - 80
    c.drawCentredString(width / 2, title_y, "Brainlyst")

    # Pink underline below title
    title_width = c.stringWidth("Brainlyst", "Helvetica-Bold", 28)
    c.setStrokeColor(pink)
    c.setLineWidth(4)
    c.line((width - title_width) / 2, title_y - 8, (width + title_width) / 2, title_y - 8)

    # Tagline below title, smaller font
    c.setFont("Helvetica", 14)
    c.setFillColor(pink)
    c.drawCentredString(width / 2, title_y - 30, "Smart scans for sharp minds")

    # Date below tagline
    c.setFont("Helvetica", 10)
    c.setFillColor(colors.black)
    current_date = datetime.now().strftime("%B %d, %Y")
    c.drawCentredString(width / 2, title_y - 50, f"Date: {current_date}")

    # Horizontal line below date
    c.setStrokeColor(colors.grey)
    c.setLineWidth(1)
    c.line(50, title_y - 65, width - 50, title_y - 65)

    # Disclaimer at bottom in smaller font
    disclaimer = (
    "Note: This report is generated by an AI model and is not 100% accurate.\n"
    "Please consult a medical professional for diagnosis, especially if confidence is high."
    )

    # Set font and color
    c.setFillColor(colors.darkgray)
    c.setFont("Helvetica-Oblique", 9)

    # Get page width
    page_width, _ = letter
    center_x = page_width / 2

    # Draw each line centered
    lines = disclaimer.split("\n")
    start_y = 60
    for i, line in enumerate(lines):
        c.drawCentredString(center_x, start_y - (i * 12), line)


    # Watermark text diagonally across page
    c.saveState()
    c.setFont("Helvetica-Bold", 90)
    c.setFillColor(colors.lightgrey)
    c.translate(width / 2, height / 2)
    c.rotate(45)
    c.drawCentredString(0, 0, "Brainlyst")
    c.restoreState()

    # Uploaded brain image centered below the header area
    img_width = 4 * inch
    img_height = 3 * inch
    img_x = (width - img_width) / 2
    img_y = title_y - 120 - img_height
    try:
        c.drawImage(img_path, img_x, img_y, width=img_width, height=img_height, preserveAspectRatio=True)
    except Exception:
        c.setFont("Helvetica-Oblique", 10)
        c.setFillColor(colors.red)
        c.drawCentredString(width / 2, img_y + img_height / 2, "Image could not be loaded.")
        c.setFillColor(colors.black)

    # Text box under image for Prediction, About & Treatment
    text_start_y = img_y - 30
    text_x = 75
    line_spacing = 18

    tumor_info = {
        "Glioma": {
            "desc": "Gliomas are tumors that start in the glial cells.",
            "treatment": "Radiation, chemo, surgery."
        },
        "Meningioma": {
            "desc": "Meningiomas grow from the meninges.",
            "treatment": "Surgery or radiation."
        },
        "No Tumor": {
            "desc": "No tumor detected.",
            "treatment": "No treatment necessary."
        },
        "Pituitary": {
            "desc": "Tumor in the pituitary gland.",
            "treatment": "Medication or surgery."
        }
    }

    c.setFont("Helvetica-Bold", 14)
    c.setFillColor(colors.black)
    if result == "Invalid":
        c.setFillColor(colors.red)
        c.drawString(text_x, text_start_y, "Error: Uploaded image is not a valid MRI scan.")
        c.setFillColor(colors.black)
    else:
        c.drawString(text_x, text_start_y, f"Prediction: {result} ({confidence * 100:.2f}%)")

        info = tumor_info.get(result, {})
        c.setFont("Helvetica-Bold", 13)
        c.drawString(text_x, text_start_y - line_spacing * 2, f"About {result}:")
        c.setFont("Helvetica", 12)
        c.drawString(text_x, text_start_y - line_spacing * 3, info.get('desc', ''))

        c.setFont("Helvetica-Bold", 13)
        c.drawString(text_x, text_start_y - line_spacing * 5, "Treatment Options:")
        c.setFont("Helvetica", 12)
        c.drawString(text_x, text_start_y - line_spacing * 6, info.get('treatment', ''))

    # Motivating line in pink below description
    c.setFillColor(pink)
    c.setFont("Helvetica-BoldOblique", 14)
    c.drawCentredString(width / 2, text_start_y - line_spacing * 8, 
                        "Empower your mind. Embrace your journey.")

    

    c.save()
    return os.path.basename(pdf_filename)